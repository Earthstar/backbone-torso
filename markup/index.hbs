<h3>
  <a id="welcome-to-torso" class="anchor" href="#welcome-to-torso" aria-hidden="true"></a>
  What is backbone-torso?
</h3>
<hr/>
<p><a href="http://www.backbonejs.org">Backbone</a> provides many convenient tools for building Single Page Applications (SPAs) out of the box, and we absolutely love using it!  However, Backbone only gives us the bare bones (excuse the overused pun) of what you need to build a complex front end application. Torso gives you the blueprints and some extra tools to build something quickly that scales well. Torso was first created by Vecna employees that needed to build robotics and health care applications that have intense feature sets and large user bases.
</p>
<h3>
  <a id="welcome-to-torso" class="anchor" href="#welcome-to-torso" aria-hidden="true"></a>
  What's in it?
</h3>
<hr/>
<p>
First, this reference guide will equip you with a set of rules on how to create small components with clear interfaces that still work well when things get complicated. After that, Torso has many choose-what-you-want modules. These additions to Backbone's base building blocks include form handling, data validation tools, polling caches, sub-view management, and more. Torso simplifies the design process and eases the nightmare of building complicated web apps. </p>

<div class="button-panel">
  <a class="learn-more pull-right" href="#recipes"><i class="fa fa-spoon"></i> Recipes</a>
  <a class="learn-more pull-right" href="#modules"><i class="fa fa-cubes"></i> Modules</a>
  <a class="learn-more pull-right" href="#philosophy"><i class="fa fa-book"></i> Philosophy</a>
</div>

<!-- DESIGN PHILOSOPHY -->
<h3>
  <a id="philosophy" class="anchor" href="#philosophy" aria-hidden="true"></a>
  Philosophy
</h3>
<hr/>
<p>You might have heard "convention over configuration" as a way to hide framework implementation and reduce code. Typically, if you have desires to do something that lies just over the edge of convention approaching the unconventional, those frameworks are a headache to get working. Torso is a how-to for "configuration using convention". The goal of Torso is to define some abstractions, rules of thumb, and conventions that sit on top of an unopinionated framework like Backbone, that allows us to move quickly through the easy bits and flexibility to handle the edge cases. Think of Torso as more of a practiced martial art than a weapon to wield. </p>
<p>To see this, let's examine a simple Backbone View:</p>
<pre><code class="javascript"><script type="text/code">
var basicView = Backbone.View.extend({
  events: {'click .list-item': 'handler'},
  initialize: function() {...},
  render: function() {...},
  handler: function() {...}
});
</script></code></pre>
<p>Backbone offers an easy jumping off point, but what happens when you add event listeners or timers that need to be removed after the view is done? Should the render method take arguments? Does calling render change the state of the application? When can I call render on this view? So many questions, each one can break functionality if they are inconsistent within your app. With Torso, we lay down the laws that answer questions just like these and keep your application consistent.</p>
<p>Torso view's render methods never take arguments, can be called whenever, and they never change the state of the application. We'll explain how to make this possible and other rules in <a href="#recipes">Recipes</a> section.</p>
<div class="button-panel">
  <a class="learn-more pull-right" href="#philosophy"><i class="fa fa-book"></i> Philosophy</a>
</div>

<!-- MODULES -->
<h3>
  <a id="modules" class="anchor" href="#modules" aria-hidden="true"></a>
  Modules
</h3>
<hr/>
<p>Torso provides modules that provide convenient interfaces for common web functionality.
Some modules are:</p>
<ul class="large-links">
  <li><a href="modules/polling-mixin">Polling mixin</a>
  <p>Setup periodic polling models or collections.</p>
<pre><code class="javascript"><script type="text/code">
var users = new Torso.PollingCollection({
  model: UserModel,
  url: '/users'
});
// Start periodic 5-second polling
users.startPolling(5000);
// Stop polling
users.stopPolling();
</script></code></pre>
          </li>

          <li><a href="modules/list-view">List View</a>
          <p>Effectively manage a list of sub-views using backbone collections.</p>
<pre><code class="javascript"><script type="text/code">
var ingredientsView = new Torso.ListView({
  collection: ingedientsCollection,
  childView: SingleIngredientView
});
</script></code></pre></li>

<div class="button-panel">
  <a class="learn-more pull-right" href="#modules"><i class="fa fa-cubes"></i> Modules</a>
</div>

<!-- Recipes -->
<h3>
  <a id="recipes" class="anchor" href="#recipes" aria-hidden="true"></a>
  Recipes
</h3>
<hr/>
<p>This is an example recipe.</p>
<pre><code class="javascript"><script type="text/code">
var viewClass = Torso.View.extend({
  initialize: function() {
    // RECIPE
  }
});
</script></code></pre>
<p>And maybe some more text.</p>
<div class="button-panel">
  <a class="learn-more pull-right" href="#recipes"><i class="fa fa-spoon"></i> Recipes</a>
</div>

<!-- AUTHORS & CONTRIBUTORS -->
<h3>
  <a id="authors-and-contributors" class="anchor" href="#authors-and-contributors" aria-hidden="true"></a>
  Authors &amp; Contributors
</h3>
<hr/>
<p>Project creators:<br/>
  <ul>
    <li>Kent Willis <a href="https://github.com/kentmw" class="user-mention">@kentmw</a></li>
    <li>Ariel Wexler <a href="https://github.com/arikwex" class="user-mention">@arikwex</a></li>
    <li>Josh Young <a href="https://github.com/mandragorn" class="user-mention">@mandragorn</a></li>
    <li>Devon Bush <a href="https://github.com/devonbush" class="user-mention">@devonbush</a></li>
  </ul>
</p>
